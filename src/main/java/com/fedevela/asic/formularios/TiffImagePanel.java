package com.fedevela.asic.formularios;

/**
 * Created by fvelazquez on 31/03/14.
 */
import com.fedevela.asic.util.BigFileReader;
import com.lowagie.text.Document;
import com.lowagie.text.Image;
import com.lowagie.text.PageSize;
import com.lowagie.text.Rectangle;
import com.lowagie.text.pdf.PdfContentByte;
import com.lowagie.text.pdf.PdfWriter;
import com.lowagie.text.pdf.RandomAccessFileOrArray;
import com.lowagie.text.pdf.codec.TiffImage;
import com.sun.media.jai.codec.ByteArraySeekableStream;
import java.awt.image.RenderedImage;
import java.awt.image.renderable.ParameterBlock;
import java.io.ByteArrayInputStream;
import java.io.FileOutputStream;
import java.util.Iterator;
import java.util.regex.Pattern;
import javax.imageio.IIOImage;
import javax.imageio.ImageIO;
import javax.imageio.ImageReader;
import javax.imageio.stream.ImageInputStream;
import javax.media.jai.JAI;
import javax.media.jai.RenderedOp;
import javax.media.jai.widget.ScrollingImagePanel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Administrador
 */
public abstract class TiffImagePanel extends javax.swing.JPanel {

    private Logger logger = LoggerFactory.getLogger(TiffImagePanel.class);
    private int pagina;
    private int escala;
    private int rotacion;
    private byte[] contenidoImagen;
    //private ImageDecoder dec;
    private ImageReader tiffReader;
    private String[] escalas = {"25%", "50%", "75%", "100%", "125%", "150%", "175%", "200%", "250%", "300%"};
    protected int ancho;
    protected int largo;
    //private JFrame parent;
    private ScrollingImagePanel panel;

    static {
        System.setProperty("com.sun.media.jai.disableMediaLib", "true");
    }

    /**
     * Creates new form TiffImagePanel
     */
    public TiffImagePanel(String imagen, int ancho, int largo) {
        initComponents();
        initVariables(ancho, largo);
        leerContenidoImagen(imagen);
    }

    public TiffImagePanel(byte[] contenido, int ancho, int largo) {
        initComponents();
        initVariables(ancho, largo);
        leerContenidoImagen(contenido);
    }

    private void initVariables(int ancho, int largo) {
        escala = 0;
        pagina = 1;
        rotacion = 0;
        txtZoom.setText(escalas[escala]);
        txtRotacion.setText(String.valueOf(rotacion) + "Â°");
        btnInicio.setEnabled(false);
        btnAnterior.setEnabled(false);
        btnLejos.setEnabled(false);

        this.ancho = ancho;
        this.largo = largo;
        this.setBounds(0, 0, ancho, largo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelHerramientas = new javax.swing.JPanel();
        btnLejos = new javax.swing.JButton();
        txtZoom = new javax.swing.JTextField();
        btnCerca = new javax.swing.JButton();
        btnInicio = new javax.swing.JButton();
        btnAnterior = new javax.swing.JButton();
        txtPagina = new javax.swing.JTextField();
        btnSiguiente = new javax.swing.JButton();
        btnFin = new javax.swing.JButton();
        btnRotarIzquierda = new javax.swing.JButton();
        txtRotacion = new javax.swing.JTextField();
        btnRotarDerecha = new javax.swing.JButton();
        btnImprimirImagen = new javax.swing.JButton();

        panelHerramientas.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelHerramientas.setName("panelHerramientas"); // NOI18N
        panelHerramientas.setLayout(null);

        btnLejos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/adeamx/adeadms/images/lejos.png"))); // NOI18N
        btnLejos.setToolTipText("Reducir");
        btnLejos.setName("btnLejos"); // NOI18N
        btnLejos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLejosActionPerformed(evt);
            }
        });
        panelHerramientas.add(btnLejos);
        btnLejos.setBounds(3, 2, 25, 25);

        txtZoom.setEditable(false);
        txtZoom.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtZoom.setName("txtZoom"); // NOI18N
        panelHerramientas.add(txtZoom);
        txtZoom.setBounds(30, 2, 55, 25);

        btnCerca.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/adeamx/adeadms/images/cerca.png"))); // NOI18N
        btnCerca.setToolTipText("Ampliar");
        btnCerca.setName("btnCerca"); // NOI18N
        btnCerca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCercaActionPerformed(evt);
            }
        });
        panelHerramientas.add(btnCerca);
        btnCerca.setBounds(87, 2, 25, 25);

        btnInicio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/adeamx/adeadms/images/inicio.png"))); // NOI18N
        btnInicio.setToolTipText("Inicio");
        btnInicio.setName("btnInicio"); // NOI18N
        btnInicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInicioActionPerformed(evt);
            }
        });
        panelHerramientas.add(btnInicio);
        btnInicio.setBounds(180, 2, 25, 25);

        btnAnterior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/adeamx/adeadms/images/registroAnterior.png"))); // NOI18N
        btnAnterior.setToolTipText("Anterior");
        btnAnterior.setName("btnAnterior"); // NOI18N
        btnAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnteriorActionPerformed(evt);
            }
        });
        panelHerramientas.add(btnAnterior);
        btnAnterior.setBounds(205, 2, 25, 25);

        txtPagina.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtPagina.setName("txtPagina"); // NOI18N
        txtPagina.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPaginaKeyPressed(evt);
            }
        });
        panelHerramientas.add(txtPagina);
        txtPagina.setBounds(232, 2, 55, 25);

        btnSiguiente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/adeamx/adeadms/images/registroSiguiente.png"))); // NOI18N
        btnSiguiente.setToolTipText("Siguiente");
        btnSiguiente.setName("btnSiguiente"); // NOI18N
        btnSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSiguienteActionPerformed(evt);
            }
        });
        panelHerramientas.add(btnSiguiente);
        btnSiguiente.setBounds(289, 2, 25, 25);

        btnFin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/adeamx/adeadms/images/fin.png"))); // NOI18N
        btnFin.setToolTipText("Fin");
        btnFin.setName("btnFin"); // NOI18N
        btnFin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinActionPerformed(evt);
            }
        });
        panelHerramientas.add(btnFin);
        btnFin.setBounds(315, 2, 25, 25);

        btnRotarIzquierda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/adeamx/adeadms/images/rotarIzquierda.png"))); // NOI18N
        btnRotarIzquierda.setToolTipText("Rotar Izquierda");
        btnRotarIzquierda.setName("btnRotarIzquierda"); // NOI18N
        btnRotarIzquierda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRotarIzquierdaActionPerformed(evt);
            }
        });
        panelHerramientas.add(btnRotarIzquierda);
        btnRotarIzquierda.setBounds(411, 2, 25, 25);

        txtRotacion.setEditable(false);
        txtRotacion.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtRotacion.setName("txtRotacion"); // NOI18N
        panelHerramientas.add(txtRotacion);
        txtRotacion.setBounds(437, 2, 55, 25);

        btnRotarDerecha.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/adeamx/adeadms/images/rotarDerecha.png"))); // NOI18N
        btnRotarDerecha.setToolTipText("Rotar Derecha");
        btnRotarDerecha.setName("btnRotarDerecha"); // NOI18N
        btnRotarDerecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRotarDerechaActionPerformed(evt);
            }
        });
        panelHerramientas.add(btnRotarDerecha);
        btnRotarDerecha.setBounds(494, 2, 25, 25);

        btnImprimirImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/adeamx/adeadms/images/pdf.png"))); // NOI18N
        btnImprimirImagen.setToolTipText("Imprimir Imagen");
        btnImprimirImagen.setName("btnImprimirImagen"); // NOI18N
        btnImprimirImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirImagenActionPerformed(evt);
            }
        });
        panelHerramientas.add(btnImprimirImagen);
        btnImprimirImagen.setBounds(610, 2, 30, 25);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(panelHerramientas, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(131, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(panelHerramientas, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(518, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnLejosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLejosActionPerformed
        try {
            if (!btnCerca.isEnabled()) {
                btnCerca.setEnabled(true);
            }
            escala--;
            if (escala == 0) {
                btnLejos.setEnabled(false);
            }
            txtZoom.setText(escalas[escala]);
            if (!btnCerca.isEnabled()) {
                btnCerca.setEnabled(true);
            }
            if (escala == 0) {
                btnLejos.setEnabled(false);
            }
            txtRotacion.setText(String.valueOf(rotacion) + "Â°");
            rotarImagen(ancho, largo);
            updateUI();
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
            JOptionPane.showMessageDialog(this, "ERROR AL MOSTRAR LA IMAGEN", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnLejosActionPerformed

    private void btnCercaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCercaActionPerformed
        try {
            if (!btnLejos.isEnabled()) {
                btnLejos.setEnabled(true);
            }
            escala++;
            if (escala == 9) {
                btnCerca.setEnabled(false);
            }
            txtZoom.setText(escalas[escala]);
            if (!btnLejos.isEnabled()) {
                btnLejos.setEnabled(true);
            }
            //if (escala == 7) btnCerca.setEnabled(false);
            txtRotacion.setText(String.valueOf(rotacion) + "Â°");
            rotarImagen(ancho, largo);
            updateUI();
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
            JOptionPane.showMessageDialog(this, "ERROR AL MOSTRAR LA IMAGEN", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCercaActionPerformed

    private void btnInicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInicioActionPerformed
        try {
            if (!btnFin.isEnabled()) {
                btnFin.setEnabled(true);
            }
            if (!btnSiguiente.isEnabled()) {
                btnSiguiente.setEnabled(true);
            }

            btnInicio.setEnabled(false);
            btnAnterior.setEnabled(false);

            pagina = 1;
            rotacion = 0;
            txtRotacion.setText(String.valueOf(rotacion) + "Â°");
            rotarImagen(ancho, largo);
            updateUI();
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
            JOptionPane.showMessageDialog(this, "ERROR AL MOSTRAR LA IMAGEN", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnInicioActionPerformed

    private void btnAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnteriorActionPerformed
        //*
        try {
            if (!btnFin.isEnabled()) {
                btnFin.setEnabled(true);
            }
            if (!btnSiguiente.isEnabled()) {
                btnSiguiente.setEnabled(true);
            }

            pagina--;

            if (pagina <= 1) {
                btnInicio.setEnabled(false);
                btnAnterior.setEnabled(false);
            }

            rotacion = 0;
            txtRotacion.setText(String.valueOf(rotacion) + "Â°");
            rotarImagen(ancho, largo);
            updateUI();
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
            JOptionPane.showMessageDialog(this, "ERROR AL MOSTRAR LA IMAGEN", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        //*/
    }//GEN-LAST:event_btnAnteriorActionPerformed

    private void txtPaginaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPaginaKeyPressed
        try {
            if (evt.getKeyCode() == 10) {
                if (txtPagina.getText().trim().length() == 0) {
                    txtPagina.setText("1");
                    pagina = 1;
                } else {

                    if (Pattern.matches("\\d{1,10}", txtPagina.getText())) {
                        //int numeroPaginas = dec.getNumPages();
                        int numeroPaginas = tiffReader.getNumImages(true);

                        if (Integer.parseInt(txtPagina.getText().trim()) <= numeroPaginas) {
                            if (!(btnInicio.isEnabled())) {
                                btnInicio.setEnabled(true);
                            }
                            if (!(btnAnterior.isEnabled())) {
                                btnAnterior.setEnabled(true);
                            }

                            if (!(btnFin.isEnabled())) {
                                btnInicio.setEnabled(true);
                            }
                            if (!(btnSiguiente.isEnabled())) {
                                btnAnterior.setEnabled(true);
                            }

                            pagina = Integer.parseInt(this.txtPagina.getText().trim());

                            if (pagina == numeroPaginas) {
                                btnFin.setEnabled(false);
                                btnSiguiente.setEnabled(false);
                            } else if (pagina == 1) {
                                btnInicio.setEnabled(false);
                                btnAnterior.setEnabled(false);
                            }

                            rotacion = 0;
                            txtRotacion.setText(String.valueOf(rotacion) + "Â°");

                            rotarImagen(ancho, largo);
                        } else {
                            JOptionPane.showMessageDialog(this, "NUMERO DE PAGINA INCORRECTO", "ADVERTENCIA", JOptionPane.WARNING_MESSAGE);
                            txtPagina.setText(String.valueOf(pagina));
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "NUMERO DE PAGINA INCORRECTO", "ADVERTENCIA", JOptionPane.WARNING_MESSAGE);
                        this.txtPagina.setText(String.valueOf(pagina));
                    }
                }
            }
            updateUI();
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
            JOptionPane.showMessageDialog(this, "ERROR AL MOSTRAR LA IMAGEN", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtPaginaKeyPressed

    private void btnSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSiguienteActionPerformed
        try {
            if (!btnInicio.isEnabled()) {
                btnInicio.setEnabled(true);
            }
            if (!btnAnterior.isEnabled()) {
                btnAnterior.setEnabled(true);
            }

            pagina++;

            //int numeroPaginas = dec.getNumPages();
            int numeroPaginas = tiffReader.getNumImages(true);

            if (pagina >= numeroPaginas) {
                btnFin.setEnabled(false);
                btnSiguiente.setEnabled(false);
            }

            rotacion = 0;
            txtRotacion.setText(String.valueOf(rotacion) + "Â°");
            rotarImagen(ancho, largo);
            updateUI();
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
            JOptionPane.showMessageDialog(this, "ERROR AL MOSTRAR LA IMAGEN", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSiguienteActionPerformed

    private void btnFinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinActionPerformed
        try {
            if (!btnInicio.isEnabled()) {
                btnInicio.setEnabled(true);
            }
            if (!btnAnterior.isEnabled()) {
                btnAnterior.setEnabled(true);
            }

            btnFin.setEnabled(false);
            btnSiguiente.setEnabled(false);

            //pagina = dec.getNumPages();
            pagina = tiffReader.getNumImages(true);

            rotacion = 0;
            txtRotacion.setText(String.valueOf(rotacion) + "Â°");
            rotarImagen(ancho, largo);
            updateUI();
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
            JOptionPane.showMessageDialog(this, "ERROR AL MOSTRAR LA IMAGEN", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnFinActionPerformed

    private void btnRotarIzquierdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRotarIzquierdaActionPerformed
        try {
            if (rotacion == 0) {
                rotacion = 270;
                txtRotacion.setText(String.valueOf(rotacion));
            } else {
                rotacion -= 90;
                if (rotacion < 0) {
                    rotacion = 0;
                }
                txtRotacion.setText(String.valueOf(rotacion) + "Â°");
            }
            rotarImagen(ancho, largo);
            updateUI();
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
            JOptionPane.showMessageDialog(this, "ERROR AL MOSTRAR LA IMAGEN", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnRotarIzquierdaActionPerformed

    private void btnRotarDerechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRotarDerechaActionPerformed
        try {
            rotacion += 90;
            if (rotacion >= 360) {
                rotacion = 0;
            }
            txtRotacion.setText(String.valueOf(rotacion) + "Â°");
            rotarImagen(ancho, largo);
            updateUI();
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
            JOptionPane.showMessageDialog(this, "ERROR AL MOSTRAR LA IMAGEN", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnRotarDerechaActionPerformed

    private void btnImprimirImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirImagenActionPerformed

        JFileChooser chooser = new JFileChooser();

        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("PDF...");

        if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            String pdf = chooser.getSelectedFile().getAbsolutePath();
            if (!Pattern.matches(".+\\.pdf$", pdf)) {
                pdf += ".pdf";
            }
            generaPDF(pdf);
        }
        updateUI();
    }//GEN-LAST:event_btnImprimirImagenActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnterior;
    private javax.swing.JButton btnCerca;
    private javax.swing.JButton btnFin;
    private javax.swing.JButton btnImprimirImagen;
    private javax.swing.JButton btnInicio;
    private javax.swing.JButton btnLejos;
    private javax.swing.JButton btnRotarDerecha;
    private javax.swing.JButton btnRotarIzquierda;
    private javax.swing.JButton btnSiguiente;
    private javax.swing.JPanel panelHerramientas;
    private javax.swing.JTextField txtPagina;
    private javax.swing.JTextField txtRotacion;
    private javax.swing.JTextField txtZoom;
    // End of variables declaration//GEN-END:variables

    public void leerContenidoImagen(String rutaImagen) {
        try {
            this.contenidoImagen = new BigFileReader().read2list(rutaImagen);
            cargarByteArray();
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
            JOptionPane.showMessageDialog(this, "ERROR AL MOSTRAR LA IMAGEN", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void leerContenidoImagen(byte[] contenido) {
        this.contenidoImagen = contenido;
        cargarByteArray();
    }

    private void cargarByteArray() {
        try {
            ByteArraySeekableStream stream = new ByteArraySeekableStream(contenidoImagen);
            //dec = ImageCodec.createImageDecoder("tiff", stream, null);

            ImageInputStream tiffStream;
            Iterator<ImageReader> tiffReaders;

            tiffReaders = ImageIO.getImageReadersByFormatName("tiff");

            if (!tiffReaders.hasNext()) {
                throw new IllegalStateException("No TIFF reader found");
            }
            tiffReader = tiffReaders.next();
            tiffStream = ImageIO.createImageInputStream(new ByteArrayInputStream(contenidoImagen));

            tiffReader.setInput(tiffStream);
        } catch (Exception ex) {
            logger.error(ex.getMessage(), ex);
            JOptionPane.showMessageDialog(this, "ERROR AL MOSTRAR LA IMAGEN", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    protected abstract void actualizarParent();

    public void mostrarImagen() throws Exception {
        //int numeroPaginas = dec.getNumPages();
        int numeroPaginas = tiffReader.getNumImages(true);

        if (pagina == numeroPaginas) {
            btnInicio.setEnabled(false);
            btnAnterior.setEnabled(false);

            btnFin.setEnabled(false);
            btnSiguiente.setEnabled(false);

            txtPagina.setEnabled(false);
        }

        rotarImagen(ancho, largo);
    }

    public void rotarImagen(int ancho, int largo) throws Exception {
        txtPagina.setText(String.valueOf(pagina));

        //RenderedImage image0 = new NullOpImage(dec.decodeAsRenderedImage(pagina-1),null,OpImage.OP_IO_BOUND,null);
        IIOImage tiffImage = tiffReader.readAll(pagina - 1, tiffReader.getDefaultReadParam());
        RenderedImage image0 = tiffImage.getRenderedImage();

        //RenderedOp image1 = JAI.create("stream", stream);
        ParameterBlock params = new ParameterBlock();
        params.addSource(image0);
        params.add((float) image0.getWidth() / 2);
        params.add((float) image0.getHeight() / 2);
        params.add((float) Math.toRadians(rotacion));

        RenderedOp image2 = JAI.create("rotate", params);
        int width = image2.getWidth();
        int height = image2.getHeight();

        float pEscala = 0;
        switch (escala) {
            case 0:
                pEscala = 25.0F;
                break;
            case 1:
                pEscala = 50.0F;
                break;
            case 2:
                pEscala = 75.0F;
                break;
            case 3:
                pEscala = 100.0F;
                break;
            case 4:
                pEscala = 125.0F;
                break;
            case 5:
                pEscala = 150.0F;
                break;
            case 6:
                pEscala = 175.0F;
                break;
            case 7:
                pEscala = 200.0F;
                break;
            case 8:
                pEscala = 250.0F;
                break;
            case 9:
                pEscala = 300.0F;
                break;
        }

        float vEscala = pEscala / 100;
        params = new ParameterBlock();
        params.addSource(image2);
        params.add(vEscala);
        params.add(vEscala);

        RenderedOp image = JAI.create("scale", params);
        width = image.getWidth();
        height = image.getHeight();


        if (panel == null) {
            panel = new ScrollingImagePanel(image, width, height);
        } else {
            panel.set(image);
            this.remove(panel);
        }

        this.add(panel).setBounds(0, 31, this.getWidth(), this.getHeight() - 30);
        this.setSize(this.ancho, this.largo);

        actualizarParent();
    }

    public void generaPDF(String pdf) {

        Document document = new Document(PageSize.LETTER, 0, 0, 0, 0);
        try {
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(pdf));
            int pages = 0;
            document.open();
            PdfContentByte cb = writer.getDirectContent();
            RandomAccessFileOrArray ra = null;
            int comps = 0;
            try {
                ra = new RandomAccessFileOrArray(contenidoImagen);
                comps = TiffImage.getNumberOfPages(ra);
            } catch (Throwable e) {
                logger.error(e.getMessage(), e);
                JOptionPane.showMessageDialog(this, "ERROR AL GENERAR EL ARCHIVO PDF", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }

            for (int c = 0; c < comps; ++c) {
                try {
                    Image img = TiffImage.getTiffImage(ra, c + 1);
                    if (img != null) {
                        img.scalePercent(7200f / img.getDpiX(), 7200f / img.getDpiY());
                        document.setPageSize(new Rectangle(img.getScaledWidth(), img.getScaledHeight()));
                        img.setAbsolutePosition(0, 0);
                        cb.addImage(img);
                        document.newPage();
                        ++pages;
                    }
                } catch (Throwable e) {
                    logger.error(e.getMessage(), e);
                }
            }
            ra.close();
            document.close();

        } catch (Throwable e) {
            logger.error(e.getMessage(), e);
            JOptionPane.showMessageDialog(this, "ERROR AL GENERAR EL ARCHIVO PDF", "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }

    public static void main(String[] args) throws Exception {
        TiffImagePanel tiffImagePanel = new TiffImagePanel("/media/emc2g/telefonica/TF0017/U0043080726/T9000000001/00000001.TIF", 100, 100) {
            @Override
            protected void actualizarParent() {
                //frame.setVisible(true);
            }
        };

        tiffImagePanel.mostrarImagen();
    }
}
