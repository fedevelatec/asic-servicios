package com.fedevela.asic.formularios;

/**
 * Created by fvelazquez on 31/03/14.
 */
import java.awt.Component;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.Event;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.KeyStroke;
import javax.swing.text.DefaultEditorKit;

/**
 *
 * @author avillalobos
 */
public class FrmAutorizaciones extends javax.swing.JDialog {

    private static final long serialVersionUID = 8682154753287523454L;
    private long inicioCaptura = 0;
    private long tiempoCaptura = 0;

    /**
     * Creates new form FrmAutorizaciones
     */
    public FrmAutorizaciones(Dialog parent, boolean modal) {
        super(parent, modal);
        initComponents();
        Dimension dPantalla = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension dFormulario = getSize();
        setLocation(new Point((dPantalla.width - dFormulario.width) / 2,
                ((dPantalla.height - dFormulario.height) / 2) - 50));
        disablePasteAction(pwdClaveSupervisor);
        disableCopyAction(pwdClaveSupervisor);
    }

    public FrmAutorizaciones(Dialog parent, boolean modal, String tipoClave) {
        super(parent, modal);
        initComponents();
        Dimension dPantalla = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension dFormulario = getSize();
        setLocation(new Point((dPantalla.width - dFormulario.width) / 2,
                ((dPantalla.height - dFormulario.height) / 2) - 50));
        lbTipoClave.setText(tipoClave);
        disablePasteAction(pwdClaveSupervisor);
        disableCopyAction(pwdClaveSupervisor);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbTipoClave = new javax.swing.JLabel();
        pwdClaveSupervisor = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lbTipoClave.setFont(new java.awt.Font("DejaVu Sans", 1, 14));
        lbTipoClave.setText("Clave del Supervisor");

        pwdClaveSupervisor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pwdClaveSupervisorKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(pwdClaveSupervisor, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                                        .addComponent(lbTipoClave, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lbTipoClave)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pwdClaveSupervisor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pwdClaveSupervisorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pwdClaveSupervisorKeyReleased
        //Obtengo el tiempo en que se presiona la primera tecla
        if (inicioCaptura == 0) {
            inicioCaptura = java.util.Calendar.getInstance().getTimeInMillis();
        }
        //Verifico si terminó la captura de la clave
        if ((evt.getKeyCode() == KeyEvent.VK_ENTER && new String(pwdClaveSupervisor.getPassword()).length() > 0)
                || evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            this.setVisible(false);
            return;
        }
        //Si ya hay un texto escrito, compruebo el tiempo de captura
        if (new String(pwdClaveSupervisor.getPassword()).length() > 0) {
            tiempoCaptura = java.util.Calendar.getInstance().getTimeInMillis();
            //Si hace más de 5 segundos que está capturando la clave, borro lo que haya escrito
            if (((tiempoCaptura - inicioCaptura) / 1000) > 1) {
                pwdClaveSupervisor.setText("");
                inicioCaptura = 0;
            }
        }
    }//GEN-LAST:event_pwdClaveSupervisorKeyReleased
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lbTipoClave;
    private javax.swing.JPasswordField pwdClaveSupervisor;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the pwdClaveSupervisor
     */
    public String getPwdClaveSupervisor() {
        return new String(pwdClaveSupervisor.getPassword());
    }

    private void disablePasteAction(Component components) {
        InputMap map = ((JComponent) components).getInputMap();
        map.put(KeyStroke.getKeyStroke(KeyEvent.VK_V, Event.CTRL_MASK), DefaultEditorKit.beepAction);
        map.put(KeyStroke.getKeyStroke(KeyEvent.VK_INSERT, Event.SHIFT_MASK), DefaultEditorKit.beepAction);
    }

    private void disableCopyAction(Component components) {
        InputMap map = ((JComponent) components).getInputMap();
        map.put(KeyStroke.getKeyStroke(KeyEvent.VK_C, Event.CTRL_MASK), DefaultEditorKit.beepAction);
    }
}
